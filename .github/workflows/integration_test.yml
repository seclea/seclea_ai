name: Integration Testing

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    branches: [dev, feature/deploy-to-conda]

jobs:
  authenticate:
    runs-on: ubuntu-latest
    outputs:
      password: ${{ steps.authenticate.outputs.password }}
    steps:
      - id: authenticate
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_BUILD_USER_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=eu-west-2
          echo "::set-output name=password::$(aws ecr get-login-password --region eu-west-2)"

  test:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ${{ matrix.os }}
    needs: authenticate
    strategy:
      max-parallel: 12
      matrix:
        # only using ubuntu as that is the only OS that supports services. OS support should be fine from dev.
        os: [ubuntu-latest]
        python-version: [3.6] #, 3.7, 3.8, 3.9] out for testing.
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip

    services:
      postgres-portal:
        image: postgres:13.2
        options: >-
          --health-cmd "pg_isready -q -d postgres -U app_user"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
        env:
          POSTGRES_DB: app
          POSTGRES_USER: app_user
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

      postgres-auth:
        image: postgres:13.2
        options: >-
          --health-cmd "pg_isready -q -d postgres -U app_user"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
        env:
          POSTGRES_DB: auth
          POSTGRES_USER: app_user
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432

      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      portal:
        image: 052208718180.dkr.ecr.eu-west-2.amazonaws.com/seclea-portal:latest
        credentials:
          username: AWS
          password: ${{ needs.authenticate.outputs.password }}
        options: >-
          --health-cmd "curl localhost:8000"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          ENV_ROLE: development
          DEBUG: _json_true
          STATIC_URL: static/
          DATABASE: postgres
          SQL_DATABASE: app
          SQL_USER: app_user
          SQL_PASSWORD: postgres
          SQL_HOST: postgres-portal
          SQL_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          VERIFY_KEY: ${{ secrets.VERIFY_KEY }}
          ALLOWED_HOSTS: _json_["*"]
          API_URL_AUTH: http://localhost:8010
          CORS_ALLOWED_ORIGINS: _json_["http://localhost:8080","http://localhost:8010","http://localhost:8000"]
          CORS_ALLOW_CREDENTIALS: _json_true
          CELERY_BROKER_URL: "redis://redis:6379"
          CELERY_RESULT_BACKEND: "redis://redis:6379"
          AUTH_COOKIE_SECURE: _json_false
          AUTH_COOKIE_HTTP_ONLY: _json_false
          AUTH_COOKIE_DOMAIN: " "
        ports:
          - 8000:8000

      portal-celery:
        image: 052208718180.dkr.ecr.eu-west-2.amazonaws.com/seclea-portal-celery:latest
        credentials:
          username: AWS
          password: ${{ needs.authenticate.outputs.password }}
        env:
          ENV_ROLE: development
          DEBUG: _json_true
          STATIC_URL: static/
          DATABASE: postgres
          SQL_DATABASE: app
          SQL_USER: app_user
          SQL_PASSWORD: postgres
          SQL_HOST: localhost
          SQL_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          VERIFY_KEY: ${{ secrets.VERIFY_KEY }}
          ALLOWED_HOSTS: _json_["*"]
          API_URL_AUTH: http://localhost:8010
          CORS_ALLOWED_ORIGINS: _json_["http://localhost:8080","http://localhost:8010","http://localhost:8000"]
          CORS_ALLOW_CREDENTIALS: _json_true
          CELERY_BROKER_URL: "redis://redis:6379"
          CELERY_RESULT_BACKEND: "redis://redis:6379"
          AUTH_COOKIE_SECURE: _json_false
          AUTH_COOKIE_HTTP_ONLY: _json_false
          AUTH_COOKIE_DOMAIN: " "

      auth:
        image: 052208718180.dkr.ecr.eu-west-2.amazonaws.com/seclea-account-management:latest
        credentials:
          username: AWS
          password: ${{ needs.authenticate.outputs.password }}
        options: >-
          --health-cmd "curl localhost:8010"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          ENV_ROLE: development
          ENVIRONMENT: account_management
          DEBUG: _json_false
          DATABASE: postgres
          SQL_ENGINE: django.db.backends.postgresql
          SQL_DATABASE: auth
          SQL_USER: app_user
          SQL_PASSWORD: postgres
          SQL_HOST: localhost
          SQL_PORT: 5433
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          VERIFY_KEY: ${{ secrets.VERIFY_KEY }}
          ALLOWED_HOSTS: _json_['*']
          API_URL: http://localhost:8010
          CORS_ALLOWED_ORIGINS: _json_["http://localhost:8080","http://localhost:8010","http://localhost:8000"]
          CORS_ALLOW_CREDENTIALS: _json_true
          CELERY_BROKER_URL: "redis://redis:6379"
          CELERY_RESULT_BACKEND: "redis://redis:6379"
          ENABLE_PML_FILE_LOGGING: _json_false
          AUTH_COOKIE_SECURE: _json_false
          AUTH_COOKIE_HTTP_ONLY: _json_false
          AUTH_COOKIE_DOMAIN: " "
        ports:
          - 8010:8010

    steps:
      - name: Checkout repo - including submodules
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.TOKEN_AUTOMATION }}
          submodules: "recursive"
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          python -m unittest discover test/test_integration_portal
